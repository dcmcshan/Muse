{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "smartHTMLMode"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "Python3",
            "plugin": "Python3",
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "codeFADGeT",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "# DNA is comprised of A, T, G, and C letters. Sometimes it is useful to",
                    "# compress DNA sequence information for simplicity. The conversion dictionary",
                    "# provided here shows how DNA letters can be compressed. For example, the",
                    "# sequences AAA, TAA, GAA, and CAA can all be captured using the expression",
                    "# NAA.",
                    "",
                    "conversiondict = {'N': '(A|T|G|C)',",
                    "                  'S': '(C|G)',",
                    "                  'W': '(A|T)',",
                    "                  'R': '(A|G)',",
                    "                  'Y': '(C|T)',",
                    "                  'M': '(A|C)',",
                    "                  'K': '(G|T)',",
                    "                  'B': '(C|G|T)',",
                    "                  'D': '(A|G|T)',",
                    "                  'H': '(A|C|T)',",
                    "                  'V': '(A|C|G)',",
                    "                  'A': 'A',",
                    "                  'C': 'C',",
                    "                  'G': 'G',",
                    "                  'T': 'T'}",
                    "",
                    "",
                    "reconversiondict = {'N': '[ATGC',",
                    "                    'S': '[CG]',",
                    "                  'W': '[AT]',",
                    "                  'R': '[AG]',",
                    "                  'Y': '[CT]',",
                    "                  'M': '[AC]',",
                    "                  'K': '[GT]',",
                    "                  'B': '[CGT]',",
                    "                  'D': '[AGT]',",
                    "                  'H': '[ACT]',",
                    "                  'V': '[ACG]',",
                    "                  'A': 'A',",
                    "                  'C': 'C',",
                    "                  'G': 'G',",
                    "                  'T': 'T'}",
                    "",
                    "# In nature, DNA exists in a 'double stranded' form, such that two sequences",
                    "# are paired using the complementarity rules (A:T and G:C)",
                    "# Below is a representation of a double stranded DNA sequence:",
                    "#",
                    "#           5' - ATTGCGCAATAGCCGAATGCAGCA - 3'    <--- \"Forward Strand\"",
                    "#                ||||||||||||||||||||||||",
                    "#           3' - TAACGCGTTATCGGCTTACGTCGT - 5'    <--- \"Reverse Strand\"",
                    "#",
                    "# As indicated in the diagram above, each of the two strands is labeled as",
                    "# \"forward\" or \"reverse\" depending on the orientation of it's \"5' end\". For",
                    "# this exercise, the meaning of \"5' end\" and \"3' end\" is not important. What",
                    "# matters is that you can use the fuctions below to convert an input sequence",
                    "# into it's \"reverse complement\" if you find this functionality necessary",
                    "# to solve the below problem.",
                    "",
                    "def revcomp(s):",
                    "    \"\"\"Return the reverse complement of the given DNA or RNA string",
                    "",
                    "    Parameters",
                    "    ----------",
                    "    s : str",
                    "        DNA or RNA string",
                    "",
                    "    Returns",
                    "    -------",
                    "    str",
                    "        Rever complemented DNA or RNA string",
                    "",
                    "    Notes",
                    "    -----",
                    "    Degenerate bases (W, Y, N, etc) are allowed",
                    "",
                    "    Raises",
                    "    ------",
                    "    ValueError",
                    "        Unknown character(s) passed",
                    "    \"\"\"",
                    "    return reverse(complement(s))",
                    "",
                    "",
                    "def reverse(s):",
                    "    \"\"\"Reverses a string",
                    "",
                    "    Parameters",
                    "    ----------",
                    "    s : str",
                    "        String to reverse",
                    "",
                    "    Returns",
                    "    -------",
                    "    str",
                    "        Reversed string",
                    "    \"\"\"",
                    "    return s[::-1]",
                    "",
                    "def complement(s):",
                    "    \"\"\"Return the complement of the given DNA or RNA string",
                    "",
                    "    Parameters",
                    "    ----------",
                    "    s : str",
                    "        DNA or RNA string",
                    "",
                    "    Returns",
                    "    -------",
                    "    str",
                    "        Complemented DNA or RNA string",
                    "",
                    "    Notes",
                    "    -----",
                    "    Degenerate bases (W, Y, N, etc) are allowed",
                    "",
                    "    Raises",
                    "    ------",
                    "    ValueError",
                    "        Unknown character(s) passed",
                    "    \"\"\"",
                    "    known_bases = set('ATUCGNatucgnKRSBDMYWVHkm[]')",
                    "    unknown = set(s) - known_bases",
                    "    if len(unknown) > 0:",
                    "        raise ValueError('Unknown bases passed: %s' % ', '.join(unknown))",
                    "",
                    "    complement = str.maketrans('ATUCGNatucgnKRSBDMYWVHkm[]',",
                    "                               'TAAGCNtaagcnMYSVHKRWBDmk][')",
                    "    return s.translate(complement)",
                    "",
                    "",
                    "# The function below has a docstring, and you are tasked with filling in",
                    "# the body of the function.",
                    "",
                    "def Site_finder(full_seq, subseq):",
                    "    \"\"\" Gets a list of information on all sub-sequences in a given DNA sequence",
                    "",
                    "    Parameters",
                    "    ----------",
                    "    full_seq : str",
                    "        Input DNA sequence",
                    "    subseq : str",
                    "        target sub-sequence (i.e. NRG)",
                    "",
                    "    Returns",
                    "    -------",
                    "    list of tuple of objects",
                    "        This is a list of tuples with the following format:",
                    "            [target1, target2, target3, ...., targetN]",
                    "",
                    "        where targetX has the format:",
                    "        (positon from start, exact sub-sequence,",
                    "         strand bool(True=Fwd, False=Rev))",
                    "",
                    "        List is sorted by the position from start ON FWD STRAND,",
                    "        least to greatest.",
                    "",
                    "    Raises",
                    "    ------",
                    "    ValueError",
                    "        input sequence must contain only A, T, G, C letters",
                    "        subseq is greater than 6 bases",
                    "        subseq contains non-nucleotide characters",
                    "",
                    "    Notes",
                    "    -----",
                    "    The input sequence is the Fwd strand. It's reverse complement is the Rev",
                    "    strand.",
                    "    The exact sub-sequence returned can be comprised of only ATGC letters.",
                    "    \"\"\"",
                    "    ",
                    "    import re",
                    "    #convert degeneracies",
                    "    ",
                    "    fmatches = [(a.start(), full_seq[a.start() : a.end()], True) for a in list(re.finditer(subseq, full_seq))]",
                    "    print(\"F=\",fmatches)",
                    "    return fmatches",
                    "    ",
                    "    #matches_list = list(re.finditer(subseq, full_seq))",
                    "    #rmatches = [(len(full_seq)-a.start(), full_seq[a.start() : a.end()], True) for a in reversed(matches_list)]",
                    "    #print(\"R=\",rmatches)",
                    "  "
                ]
            },
            "output": {
                "state": {},
                "selectedType": "BeakerDisplay",
                "pluginName": "Python3",
                "shellId": "53EF1DF10A224CF3811BD3A880CB4D20",
                "elapsedTime": 138
            },
            "evaluatorReader": true,
            "lineCount": 177,
            "isError": false
        },
        {
            "id": "codeWANGDD",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "test_sequence = \"TTCATGGTATACTAGTCACGGTGCGCGCATAATGAAGGACTGTTCGCGTCCGTCACGTCTTAGGCCTGGAAAGGCCTAAGACGTGACGGACGCGAACAGTCCTTCATTATGCGCGCACCGTGAAAGTACCATATGATCAGGCACGAGATGGAAATCGGGAGATTTCCATCTCGTGCCTCCGAAGTAGCCACCGGCGCGCGGCTTCATCGGTGGCCCGATTATGAGGGTTTCACACGGGAGTGTGGCTAATACTCCCAAAGCCAGTTTAGTGAAACGCATAGAACAAGGCGATGACAGTGACCCATAACATGGGAGGGTTATTTAGGGATAAATAACCCTCCCATGTTATGGGTCACTGTCATCGCCTTGTTCTATGCGTTTCACTAAACTGGGCCCTGCACTGCGCGGTTCAAGCAGTAATGCTTGAACCGCGCAGTGCAGGGCTACCTAGCGGTCTCACTATTAAACAATGGGGGACCATTGTTTAATAGTGAGACCGCTAGGTATCATAGGTAGTATCGTCCTAGAGTAATCTAGGACGATACTACCTATGATCCAGCCTTTCAGACTACTAGCTAGGTCGGAAAGTCTGATGACAAACATTTGCGTCTAAACAGGGGACTGTTTAGACGCAAATGTTTGAATAACGCTGGTCGGACGCAGTATCGGTGGAGGATATCAACCCCGTGCGTATGGTCCCCTATCGTCCGGACGATAGGGGACCATACGCACGGGGTTGATATCCTCCACCGATACTGCTTATTGCGACCAGCCTGCAACTAATCTCGCGTGTTGCTCTCGAGAGCAACACGCGAGATTAGTTGGACGTCAATACGCAGAAATCTAGATTTCTGCGTATTGACGTCATCAGTGCCTGTCCGGAACACTCGCGAGAGTTAGTCACGGACAGGCCTTGGTACTCGACAAAGAAAGTCTGTTTCCATATATGGAAACACATGAGCTGTTTCTTTCAGTTTCCAGACCAATGTAGGTAAGCGTCGGGGACGACGCTTACCTACAAAGGTCTGGTTAGAACAAGGCACCCCTTAGGATCCTAAGGGGTGCCTTGTTCATTTCCTGGAGTGCCATAAGAGCTCACCGGTGGACTTTATTGAGCCACTAAGTACATGAGTAAGCGGACTGACCAAGATTGTTAAGATGCAAGCTTGCATCTTAACAATCTTGGTCAGTCCGCTTACTCATGTACTTAGTGGCTCAATAAAGTCCACCGGTGAGCTCTAAAGGACCTCACGGTATTCGGTGAGGCGCGTGGTCATAAAGGATTCGAGAGAATCCTTTATGACCACGCGCCTCACCGTCAGTTTCTGATATTGGGCACTGACCCAGACCTACCAAAGGGCGTCGAGTAGATCGCCGCGCTCAATTGAGCACGTTCGACGTCGAACGTGCTCAATTGAGCGCGGCGATCTACTCGACGCCCTTTGGTAGGTCTGGGTCAGTGCCCAGTCAAAGACTATAAAATCCCATGCCCCGTCCTGCAGGACTTAGGGTACGGGGGCCGGGTAGTAGCCCGCGCGCGGCGAGAGCCGCCGGCCCATCATCGGGCGCGCTGGGGAAACTTGTGTCTCTAGAGACACAAGTTTCCCCAGTTGGTATCTTGGCGTGACCCTCACGGGGGCGACCCCGTGAGGGTCACGCCAAGATACCAATAACGCTGATGTTTGAGTTGTTGAGTGAAAACTCAACAACTCAAACATCAGCGTTAGCGGACACACTGTTCCGGCCGCGCCTGTGTGACAAGTTATTAGCCTATCCAGGGATGAGCCAAGAGTCCCACCCGGTGTGTAAGTTATCCTGATTTAGTGCAATGAGGGATCATTGCACTAAATCAGGATAACTTACACACCGGGTGGGACTCTTGGCTCATCAATAATCGGATAGGTCCGTAAGCCCGGACTGATCTCTGGCGGGGACGCCAGAGATCAGTCCGGGCTTACGATAGGCCTCTATATACCTCCCCGCGAGAGCGGGGCTATCCGGAGATATATGGACGCGTGTTGCCAGTACGTTGCAAAACGTACTGGCAACACGCGACCATAGGCTTCTTGCGCTGATCTGGTAACATTTAAACGTGAGACTTCTAACCCTCGTCAGAGATGACGAGGGTTAGAAGTCTCACGTTTAAATGTTACCAGATCAGCGCAAGAAGCCTATGGTCGCCTAAGACAGGTGAATCGCTCGAATGAAACAGAAATGTTTCATTCGAGCGCGGATTCTGTCCACTTAGTTTACCTCGCTTGCGACAGGGCAACCTAAATGGAGCGAACGCTGTTGCCTCGAGTGTTCATGATATCTACTTTATCCGTACGATTACCATATCAGAGCCCCGTGTCAACAAGTTTGAGATGGCTTACCGCAGCATTGGAAAATGCTGCGGTAAGCCATCTCAAACTTGTTGACACGGGGCTCTGATATGGTAATCGTACGGATAAAGTAGATATCATGAACACTCGAGGCAAGCCCATCGCCCAGAGCTACTCCAAAACAACGTCGCGGAGTAGTCCCCCAAAGCGCGCTCTCGCGCGAGAGCGCGCTTTGGGGGACTACTCCGCGACGTTGTTTTGGAGTAGCGGGTAGCGGGTCTCTATTCGCTTATTGGCGATTCGAATCGCCAATAAGCGAATAGAGGTTCTATGCCTGCATAACCTTCGGAGGAAACTCCGAAGGTTATGCAGGCATAGAACCTCGCTTTGTCCTCCAGGCCGGGTAGGGAACTACCCGGCCTGGAGGACAAAGCACGAGGTGGAGACTGCTACTAGGGATAGTAGCAGTCTCCACCTCGTCGTCTACAATCGTACTTGCACTACGAGTCATGACTATTTACGAAACGACGTGAGTCGTTTCGTAAATAGTCATGACTCGTAGTGCAAGTACGATTGTAGACGGGGCGACTCGGGTAGCTGGCTGAAGGGATTCAGCCAGCTACCCGAGTCGCCCTGGACTAATTGATATTAGCTAATATCAATTAGTCCA\"",
                    "test_subseq = \"GNRA\"",
                    "test_subseq_re = \"G(ATGC)(AG)A\"",
                    "test_subseq_re = \"G[ATGC][AG]A\"",
                    "revcomp_test_subseq_re = revcomp(\"G[ATGC][AG]A\")",
                    "print(\"Forward query: \" + test_subseq_re)",
                    "print(\"Revcomp query: \" + revcomp_test_subseq_re)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "53EF1DF10A224CF3811BD3A880CB4D20",
                "elapsedTime": 616,
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "Forward query: G[ATGC][AG]A\nRevcomp query: T[CT][GCAT]C\n"
                        }
                    ]
                },
                "height": 71
            },
            "evaluatorReader": true,
            "lineCount": 7,
            "isError": false
        },
        {
            "id": "codeFjKU38",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "Site_finder (test_sequence,test_subseq_re)",
                    "Site_finder (complement(test_sequence),revcomp(test_subseq))"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "F= [(67, 'GGAA', True), (82, 'GTGA', True), (91, 'GCGA', True), (119, 'GTGA', True), (144, 'GAGA', True), (149, 'GGAA', True), (156, 'GGGA', True), (235, 'GGGA', True), (268, 'GTGA', True), (287, 'GCGA', True), (296, 'GTGA', True), (310, 'GGGA', True), (324, 'GGGA', True), (416, 'GTAA', True), (473, 'GGGA', True), (490, 'GTGA', True), (528, 'GTAA', True), (582, 'GGAA', True), (617, 'GGGA', True), (631, 'GCAA', True), (718, 'GGGA', True), (764, 'GCGA', True), (775, 'GCAA', True), (800, 'GAGA', True), (804, 'GCAA', True), (811, 'GCGA', True), (838, 'GAAA', True), (880, 'GGAA', True), (889, 'GCGA', True), (928, 'GAAA', True), (948, 'GGAA', True), (991, 'GTAA', True), (1001, 'GGGA', True), (1131, 'GTAA', True), (1160, 'GCAA', True), (1231, 'GTGA', True), (1260, 'GTGA', True), (1286, 'GAGA', True), (1423, 'GCGA', True), (1540, 'GCGA', True), (1573, 'GGGA', True), (1591, 'GAGA', True), (1623, 'GTGA', True), (1638, 'GCGA', True), (1646, 'GTGA', True), (1694, 'GTGA', True), (1754, 'GTGA', True), (1777, 'GGGA', True), (1805, 'GTAA', True), (1825, 'GCAA', True), (1832, 'GGGA', True), (1872, 'GGGA', True), (1906, 'GTAA', True), (1930, 'GGGA', True), (1939, 'GAGA', True), (1981, 'GCGA', True), (2000, 'GAGA', True), (2031, 'GCAA', True), (2044, 'GCAA', True), (2051, 'GCGA', True), (2079, 'GTAA', True), (2092, 'GTGA', True), (2114, 'GAGA', True), (2162, 'GCAA', True), (2190, 'GTGA', True), (2205, 'GAAA', True), (2211, 'GAAA', True), (2260, 'GCGA', True), (2268, 'GCAA', True), (2282, 'GCGA', True), (2363, 'GAGA', True), (2384, 'GGAA', True), (2397, 'GTAA', True), (2437, 'GTAA', True), (2476, 'GCAA', True), (2543, 'GCGA', True), (2560, 'GGGA', True), (2571, 'GCGA', True), (2619, 'GCGA', True), (2639, 'GCGA', True), (2674, 'GGAA', True), (2730, 'GGGA', True), (2766, 'GAGA', True), (2779, 'GGGA', True), (2845, 'GAAA', True), (2853, 'GTGA', True), (2865, 'GTAA', True), (2887, 'GCAA', True), (2908, 'GCGA', True), (2930, 'GGGA', True)]\nF= []\n"
                        }
                    ],
                    "payload": "<div class=\"output_subarea output_text\"><pre>[]</pre></div>"
                },
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "53EF1DF10A224CF3811BD3A880CB4D20",
                "elapsedTime": 374,
                "height": 263
            },
            "evaluatorReader": true,
            "lineCount": 2,
            "isError": false
        },
        {
            "id": "codeg2jzrw",
            "type": "code",
            "evaluator": "HTML",
            "input": {
                "body": [
                    "<div id=\"seq\" style=\"height:250px; width:800px; overflow-x:scroll ; overflow-y: hidden; padding-bottom:10px;\">      </div>"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<script>\nvar beaker = bkHelper.getBeakerObject().beakerObj;\n</script>\n<div id=\"seq\" style=\"height:250px; width:800px; overflow-x:scroll ; overflow-y: hidden; padding-bottom:10px;\">      </div>"
                },
                "selectedType": "BeakerDisplay",
                "elapsedTime": 2,
                "height": 287
            },
            "evaluatorReader": true,
            "lineCount": 1,
            "isError": false
        },
        {
            "id": "code7rxK0o",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "test_sequence",
                    "beaker.sequence = test_sequence",
                    "beaker.revcomp = revcomp(test_sequence)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "name &apos;beaker&apos; is not defined",
                        "name &apos;beaker&apos; is not defined<br><span  class=\"ansired\">---------------------------------------------------------------------------</span><br><span  class=\"ansired\">NameError</span>                                 Traceback (most recent call last)<br><span  class=\"ansigreen\">&lt;ipython-input-1-520ad3d3f22c&gt;</span> in <span  class=\"ansicyan\">&lt;module&gt;<span  class=\"ansiblue\">()</span>\n<span  class=\"ansigreen\">      1</span> test_sequence<span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">----&gt; 2<span  class=\"ansired\"> </span>beaker<span  class=\"ansiblue\">.</span>sequence <span  class=\"ansiblue\">=</span> test_sequence<span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">      3</span> beaker<span  class=\"ansiblue\">.</span>revcomp <span  class=\"ansiblue\">=</span> revcomp<span  class=\"ansiblue\">(</span>test_sequence<span  class=\"ansiblue\">)</span><span  class=\"ansiblue\"></span>\n<br><span  class=\"ansired\">NameError</span>: name &apos;beaker&apos; is not defined"
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Python3",
                "shellId": "53EF1DF10A224CF3811BD3A880CB4D20",
                "elapsedTime": 361,
                "dataresult": "TTCATGGTATACTAGTCACGGTGCGCGCATAATGAAGGACTGTTCGCGTCCGTCACGTCTTAGGCCTGGAAAGGCCTAAGACGTGACGGACGCGAACAGTCCTTCATTATGCGCGCACCGTGAAAGTACCATATGATCAGGCACGAGATGGAAATCGGGAGATTTCCATCTCGTGCCTCCGAAGTAGCCACCGGCGCGCGGCTTCATCGGTGGCCCGATTATGAGGGTTTCACACGGGAGTGTGGCTAATACTCCCAAAGCCAGTTTAGTGAAACGCATAGAACAAGGCGATGACAGTGACCCATAACATGGGAGGGTTATTTAGGGATAAATAACCCTCCCATGTTATGGGTCACTGTCATCGCCTTGTTCTATGCGTTTCACTAAACTGGGCCCTGCACTGCGCGGTTCAAGCAGTAATGCTTGAACCGCGCAGTGCAGGGCTACCTAGCGGTCTCACTATTAAACAATGGGGGACCATTGTTTAATAGTGAGACCGCTAGGTATCATAGGTAGTATCGTCCTAGAGTAATCTAGGACGATACTACCTATGATCCAGCCTTTCAGACTACTAGCTAGGTCGGAAAGTCTGATGACAAACATTTGCGTCTAAACAGGGGACTGTTTAGACGCAAATGTTTGAATAACGCTGGTCGGACGCAGTATCGGTGGAGGATATCAACCCCGTGCGTATGGTCCCCTATCGTCCGGACGATAGGGGACCATACGCACGGGGTTGATATCCTCCACCGATACTGCTTATTGCGACCAGCCTGCAACTAATCTCGCGTGTTGCTCTCGAGAGCAACACGCGAGATTAGTTGGACGTCAATACGCAGAAATCTAGATTTCTGCGTATTGACGTCATCAGTGCCTGTCCGGAACACTCGCGAGAGTTAGTCACGGACAGGCCTTGGTACTCGACAAAGAAAGTCTGTTTCCATATATGGAAACACATGAGCTGTTTCTTTCAGTTTCCAGACCAATGTAGGTAAGCGTCGGGGACGACGCTTACCTACAAAGGTCTGGTTAGAACAAGGCACCCCTTAGGATCCTAAGGGGTGCCTTGTTCATTTCCTGGAGTGCCATAAGAGCTCACCGGTGGACTTTATTGAGCCACTAAGTACATGAGTAAGCGGACTGACCAAGATTGTTAAGATGCAAGCTTGCATCTTAACAATCTTGGTCAGTCCGCTTACTCATGTACTTAGTGGCTCAATAAAGTCCACCGGTGAGCTCTAAAGGACCTCACGGTATTCGGTGAGGCGCGTGGTCATAAAGGATTCGAGAGAATCCTTTATGACCACGCGCCTCACCGTCAGTTTCTGATATTGGGCACTGACCCAGACCTACCAAAGGGCGTCGAGTAGATCGCCGCGCTCAATTGAGCACGTTCGACGTCGAACGTGCTCAATTGAGCGCGGCGATCTACTCGACGCCCTTTGGTAGGTCTGGGTCAGTGCCCAGTCAAAGACTATAAAATCCCATGCCCCGTCCTGCAGGACTTAGGGTACGGGGGCCGGGTAGTAGCCCGCGCGCGGCGAGAGCCGCCGGCCCATCATCGGGCGCGCTGGGGAAACTTGTGTCTCTAGAGACACAAGTTTCCCCAGTTGGTATCTTGGCGTGACCCTCACGGGGGCGACCCCGTGAGGGTCACGCCAAGATACCAATAACGCTGATGTTTGAGTTGTTGAGTGAAAACTCAACAACTCAAACATCAGCGTTAGCGGACACACTGTTCCGGCCGCGCCTGTGTGACAAGTTATTAGCCTATCCAGGGATGAGCCAAGAGTCCCACCCGGTGTGTAAGTTATCCTGATTTAGTGCAATGAGGGATCATTGCACTAAATCAGGATAACTTACACACCGGGTGGGACTCTTGGCTCATCAATAATCGGATAGGTCCGTAAGCCCGGACTGATCTCTGGCGGGGACGCCAGAGATCAGTCCGGGCTTACGATAGGCCTCTATATACCTCCCCGCGAGAGCGGGGCTATCCGGAGATATATGGACGCGTGTTGCCAGTACGTTGCAAAACGTACTGGCAACACGCGACCATAGGCTTCTTGCGCTGATCTGGTAACATTTAAACGTGAGACTTCTAACCCTCGTCAGAGATGACGAGGGTTAGAAGTCTCACGTTTAAATGTTACCAGATCAGCGCAAGAAGCCTATGGTCGCCTAAGACAGGTGAATCGCTCGAATGAAACAGAAATGTTTCATTCGAGCGCGGATTCTGTCCACTTAGTTTACCTCGCTTGCGACAGGGCAACCTAAATGGAGCGAACGCTGTTGCCTCGAGTGTTCATGATATCTACTTTATCCGTACGATTACCATATCAGAGCCCCGTGTCAACAAGTTTGAGATGGCTTACCGCAGCATTGGAAAATGCTGCGGTAAGCCATCTCAAACTTGTTGACACGGGGCTCTGATATGGTAATCGTACGGATAAAGTAGATATCATGAACACTCGAGGCAAGCCCATCGCCCAGAGCTACTCCAAAACAACGTCGCGGAGTAGTCCCCCAAAGCGCGCTCTCGCGCGAGAGCGCGCTTTGGGGGACTACTCCGCGACGTTGTTTTGGAGTAGCGGGTAGCGGGTCTCTATTCGCTTATTGGCGATTCGAATCGCCAATAAGCGAATAGAGGTTCTATGCCTGCATAACCTTCGGAGGAAACTCCGAAGGTTATGCAGGCATAGAACCTCGCTTTGTCCTCCAGGCCGGGTAGGGAACTACCCGGCCTGGAGGACAAAGCACGAGGTGGAGACTGCTACTAGGGATAGTAGCAGTCTCCACCTCGTCGTCTACAATCGTACTTGCACTACGAGTCATGACTATTTACGAAACGACGTGAGTCGTTTCGTAAATAGTCATGACTCGTAGTGCAAGTACGATTGTAGACGGGGCGACTCGGGTAGCTGGCTGAAGGGATTCAGCCAGCTACCCGAGTCGCCCTGGACTAATTGATATTAGCTAATATCAATTAGTCCA",
                "height": 81
            },
            "evaluatorReader": true,
            "lineCount": 3,
            "isError": true,
            "wordWrapDisabled": true
        },
        {
            "id": "codeURqh1i",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.sequence",
                    "",
                    "document.getElementById(\"seq\").innerHTML = beaker.sequence + \"\\n\" + beaker.revcomp",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": "TTCATGGTATACTAGTCACGGTGCGCGCATAATGAAGGACTGTTCGCGTCCGTCACGTCTTAGGCCTGGAAAGGCCTAAGACGTGACGGACGCGAACAGTCCTTCATTATGCGCGCACCGTGAAAGTACCATATGATCAGGCACGAGATGGAAATCGGGAGATTTCCATCTCGTGCCTCCGAAGTAGCCACCGGCGCGCGGCTTCATCGGTGGCCCGATTATGAGGGTTTCACACGGGAGTGTGGCTAATACTCCCAAAGCCAGTTTAGTGAAACGCATAGAACAAGGCGATGACAGTGACCCATAACATGGGAGGGTTATTTAGGGATAAATAACCCTCCCATGTTATGGGTCACTGTCATCGCCTTGTTCTATGCGTTTCACTAAACTGGGCCCTGCACTGCGCGGTTCAAGCAGTAATGCTTGAACCGCGCAGTGCAGGGCTACCTAGCGGTCTCACTATTAAACAATGGGGGACCATTGTTTAATAGTGAGACCGCTAGGTATCATAGGTAGTATCGTCCTAGAGTAATCTAGGACGATACTACCTATGATCCAGCCTTTCAGACTACTAGCTAGGTCGGAAAGTCTGATGACAAACATTTGCGTCTAAACAGGGGACTGTTTAGACGCAAATGTTTGAATAACGCTGGTCGGACGCAGTATCGGTGGAGGATATCAACCCCGTGCGTATGGTCCCCTATCGTCCGGACGATAGGGGACCATACGCACGGGGTTGATATCCTCCACCGATACTGCTTATTGCGACCAGCCTGCAACTAATCTCGCGTGTTGCTCTCGAGAGCAACACGCGAGATTAGTTGGACGTCAATACGCAGAAATCTAGATTTCTGCGTATTGACGTCATCAGTGCCTGTCCGGAACACTCGCGAGAGTTAGTCACGGACAGGCCTTGGTACTCGACAAAGAAAGTCTGTTTCCATATATGGAAACACATGAGCTGTTTCTTTCAGTTTCCAGACCAATGTAGGTAAGCGTCGGGGACGACGCTTACCTACAAAGGTCTGGTTAGAACAAGGCACCCCTTAGGATCCTAAGGGGTGCCTTGTTCATTTCCTGGAGTGCCATAAGAGCTCACCGGTGGACTTTATTGAGCCACTAAGTACATGAGTAAGCGGACTGACCAAGATTGTTAAGATGCAAGCTTGCATCTTAACAATCTTGGTCAGTCCGCTTACTCATGTACTTAGTGGCTCAATAAAGTCCACCGGTGAGCTCTAAAGGACCTCACGGTATTCGGTGAGGCGCGTGGTCATAAAGGATTCGAGAGAATCCTTTATGACCACGCGCCTCACCGTCAGTTTCTGATATTGGGCACTGACCCAGACCTACCAAAGGGCGTCGAGTAGATCGCCGCGCTCAATTGAGCACGTTCGACGTCGAACGTGCTCAATTGAGCGCGGCGATCTACTCGACGCCCTTTGGTAGGTCTGGGTCAGTGCCCAGTCAAAGACTATAAAATCCCATGCCCCGTCCTGCAGGACTTAGGGTACGGGGGCCGGGTAGTAGCCCGCGCGCGGCGAGAGCCGCCGGCCCATCATCGGGCGCGCTGGGGAAACTTGTGTCTCTAGAGACACAAGTTTCCCCAGTTGGTATCTTGGCGTGACCCTCACGGGGGCGACCCCGTGAGGGTCACGCCAAGATACCAATAACGCTGATGTTTGAGTTGTTGAGTGAAAACTCAACAACTCAAACATCAGCGTTAGCGGACACACTGTTCCGGCCGCGCCTGTGTGACAAGTTATTAGCCTATCCAGGGATGAGCCAAGAGTCCCACCCGGTGTGTAAGTTATCCTGATTTAGTGCAATGAGGGATCATTGCACTAAATCAGGATAACTTACACACCGGGTGGGACTCTTGGCTCATCAATAATCGGATAGGTCCGTAAGCCCGGACTGATCTCTGGCGGGGACGCCAGAGATCAGTCCGGGCTTACGATAGGCCTCTATATACCTCCCCGCGAGAGCGGGGCTATCCGGAGATATATGGACGCGTGTTGCCAGTACGTTGCAAAACGTACTGGCAACACGCGACCATAGGCTTCTTGCGCTGATCTGGTAACATTTAAACGTGAGACTTCTAACCCTCGTCAGAGATGACGAGGGTTAGAAGTCTCACGTTTAAATGTTACCAGATCAGCGCAAGAAGCCTATGGTCGCCTAAGACAGGTGAATCGCTCGAATGAAACAGAAATGTTTCATTCGAGCGCGGATTCTGTCCACTTAGTTTACCTCGCTTGCGACAGGGCAACCTAAATGGAGCGAACGCTGTTGCCTCGAGTGTTCATGATATCTACTTTATCCGTACGATTACCATATCAGAGCCCCGTGTCAACAAGTTTGAGATGGCTTACCGCAGCATTGGAAAATGCTGCGGTAAGCCATCTCAAACTTGTTGACACGGGGCTCTGATATGGTAATCGTACGGATAAAGTAGATATCATGAACACTCGAGGCAAGCCCATCGCCCAGAGCTACTCCAAAACAACGTCGCGGAGTAGTCCCCCAAAGCGCGCTCTCGCGCGAGAGCGCGCTTTGGGGGACTACTCCGCGACGTTGTTTTGGAGTAGCGGGTAGCGGGTCTCTATTCGCTTATTGGCGATTCGAATCGCCAATAAGCGAATAGAGGTTCTATGCCTGCATAACCTTCGGAGGAAACTCCGAAGGTTATGCAGGCATAGAACCTCGCTTTGTCCTCCAGGCCGGGTAGGGAACTACCCGGCCTGGAGGACAAAGCACGAGGTGGAGACTGCTACTAGGGATAGTAGCAGTCTCCACCTCGTCGTCTACAATCGTACTTGCACTACGAGTCATGACTATTTACGAAACGACGTGAGTCGTTTCGTAAATAGTCATGACTCGTAGTGCAAGTACGATTGTAGACGGGGCGACTCGGGTAGCTGGCTGAAGGGATTCAGCCAGCTACCCGAGTCGCCCTGGACTAATTGATATTAGCTAATATCAATTAGTCCA\nundefined",
                "selectedType": "Text",
                "pluginName": "JavaScript",
                "elapsedTime": 103,
                "height": 354
            },
            "evaluatorReader": true,
            "lineCount": 4,
            "isError": false
        },
        {
            "id": "codejbpzlN",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": "Evaluation cancelled due to a failure of an earlier cell evaluation"
                },
                "selectedType": "BeakerDisplay",
                "height": 77
            },
            "evaluatorReader": true,
            "isError": true
        }
    ],
    "namespace": {
        "sequence": "TTCATGGTATACTAGTCACGGTGCGCGCATAATGAAGGACTGTTCGCGTCCGTCACGTCTTAGGCCTGGAAAGGCCTAAGACGTGACGGACGCGAACAGTCCTTCATTATGCGCGCACCGTGAAAGTACCATATGATCAGGCACGAGATGGAAATCGGGAGATTTCCATCTCGTGCCTCCGAAGTAGCCACCGGCGCGCGGCTTCATCGGTGGCCCGATTATGAGGGTTTCACACGGGAGTGTGGCTAATACTCCCAAAGCCAGTTTAGTGAAACGCATAGAACAAGGCGATGACAGTGACCCATAACATGGGAGGGTTATTTAGGGATAAATAACCCTCCCATGTTATGGGTCACTGTCATCGCCTTGTTCTATGCGTTTCACTAAACTGGGCCCTGCACTGCGCGGTTCAAGCAGTAATGCTTGAACCGCGCAGTGCAGGGCTACCTAGCGGTCTCACTATTAAACAATGGGGGACCATTGTTTAATAGTGAGACCGCTAGGTATCATAGGTAGTATCGTCCTAGAGTAATCTAGGACGATACTACCTATGATCCAGCCTTTCAGACTACTAGCTAGGTCGGAAAGTCTGATGACAAACATTTGCGTCTAAACAGGGGACTGTTTAGACGCAAATGTTTGAATAACGCTGGTCGGACGCAGTATCGGTGGAGGATATCAACCCCGTGCGTATGGTCCCCTATCGTCCGGACGATAGGGGACCATACGCACGGGGTTGATATCCTCCACCGATACTGCTTATTGCGACCAGCCTGCAACTAATCTCGCGTGTTGCTCTCGAGAGCAACACGCGAGATTAGTTGGACGTCAATACGCAGAAATCTAGATTTCTGCGTATTGACGTCATCAGTGCCTGTCCGGAACACTCGCGAGAGTTAGTCACGGACAGGCCTTGGTACTCGACAAAGAAAGTCTGTTTCCATATATGGAAACACATGAGCTGTTTCTTTCAGTTTCCAGACCAATGTAGGTAAGCGTCGGGGACGACGCTTACCTACAAAGGTCTGGTTAGAACAAGGCACCCCTTAGGATCCTAAGGGGTGCCTTGTTCATTTCCTGGAGTGCCATAAGAGCTCACCGGTGGACTTTATTGAGCCACTAAGTACATGAGTAAGCGGACTGACCAAGATTGTTAAGATGCAAGCTTGCATCTTAACAATCTTGGTCAGTCCGCTTACTCATGTACTTAGTGGCTCAATAAAGTCCACCGGTGAGCTCTAAAGGACCTCACGGTATTCGGTGAGGCGCGTGGTCATAAAGGATTCGAGAGAATCCTTTATGACCACGCGCCTCACCGTCAGTTTCTGATATTGGGCACTGACCCAGACCTACCAAAGGGCGTCGAGTAGATCGCCGCGCTCAATTGAGCACGTTCGACGTCGAACGTGCTCAATTGAGCGCGGCGATCTACTCGACGCCCTTTGGTAGGTCTGGGTCAGTGCCCAGTCAAAGACTATAAAATCCCATGCCCCGTCCTGCAGGACTTAGGGTACGGGGGCCGGGTAGTAGCCCGCGCGCGGCGAGAGCCGCCGGCCCATCATCGGGCGCGCTGGGGAAACTTGTGTCTCTAGAGACACAAGTTTCCCCAGTTGGTATCTTGGCGTGACCCTCACGGGGGCGACCCCGTGAGGGTCACGCCAAGATACCAATAACGCTGATGTTTGAGTTGTTGAGTGAAAACTCAACAACTCAAACATCAGCGTTAGCGGACACACTGTTCCGGCCGCGCCTGTGTGACAAGTTATTAGCCTATCCAGGGATGAGCCAAGAGTCCCACCCGGTGTGTAAGTTATCCTGATTTAGTGCAATGAGGGATCATTGCACTAAATCAGGATAACTTACACACCGGGTGGGACTCTTGGCTCATCAATAATCGGATAGGTCCGTAAGCCCGGACTGATCTCTGGCGGGGACGCCAGAGATCAGTCCGGGCTTACGATAGGCCTCTATATACCTCCCCGCGAGAGCGGGGCTATCCGGAGATATATGGACGCGTGTTGCCAGTACGTTGCAAAACGTACTGGCAACACGCGACCATAGGCTTCTTGCGCTGATCTGGTAACATTTAAACGTGAGACTTCTAACCCTCGTCAGAGATGACGAGGGTTAGAAGTCTCACGTTTAAATGTTACCAGATCAGCGCAAGAAGCCTATGGTCGCCTAAGACAGGTGAATCGCTCGAATGAAACAGAAATGTTTCATTCGAGCGCGGATTCTGTCCACTTAGTTTACCTCGCTTGCGACAGGGCAACCTAAATGGAGCGAACGCTGTTGCCTCGAGTGTTCATGATATCTACTTTATCCGTACGATTACCATATCAGAGCCCCGTGTCAACAAGTTTGAGATGGCTTACCGCAGCATTGGAAAATGCTGCGGTAAGCCATCTCAAACTTGTTGACACGGGGCTCTGATATGGTAATCGTACGGATAAAGTAGATATCATGAACACTCGAGGCAAGCCCATCGCCCAGAGCTACTCCAAAACAACGTCGCGGAGTAGTCCCCCAAAGCGCGCTCTCGCGCGAGAGCGCGCTTTGGGGGACTACTCCGCGACGTTGTTTTGGAGTAGCGGGTAGCGGGTCTCTATTCGCTTATTGGCGATTCGAATCGCCAATAAGCGAATAGAGGTTCTATGCCTGCATAACCTTCGGAGGAAACTCCGAAGGTTATGCAGGCATAGAACCTCGCTTTGTCCTCCAGGCCGGGTAGGGAACTACCCGGCCTGGAGGACAAAGCACGAGGTGGAGACTGCTACTAGGGATAGTAGCAGTCTCCACCTCGTCGTCTACAATCGTACTTGCACTACGAGTCATGACTATTTACGAAACGACGTGAGTCGTTTCGTAAATAGTCATGACTCGTAGTGCAAGTACGATTGTAGACGGGGCGACTCGGGTAGCTGGCTGAAGGGATTCAGCCAGCTACCCGAGTCGCCCTGGACTAATTGATATTAGCTAATATCAATTAGTCCA"
    }
}
