{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "smartHTMLMode"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "Python3",
            "plugin": "Python3",
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "codewawxbk",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "from collections import MutableMapping",
                    "import time",
                    "",
                    "",
                    "class TimeoutDict(MutableMapping):",
                    "    '''Dictionary that expires entries after _timeout seconds unless the dictionary is touched (set/get)'''",
                    "    ",
                    "    def _expire_check(self):",
                    "        '''Check whether all keys are expired, if so, delete the key",
                    "            Note: this evaluates all the keys, and deletes expired ones, not just the item queried",
                    "            probably a bit redundant, and less efficient than it could be if we passed item and just expired that'''",
                    "        call_time = time.time()",
                    "        for key, exp_time in list(self._expires.items()):",
                    "            if call_time >= exp_time:",
                    "                del self._data[key]",
                    "                del self._expires[key]",
                    "",
                    "    __slots__ = ('_data', '_expires', '_timeout')",
                    "",
                    "    def __init__(self, *args, **kwargs):",
                    "        '''Initialize timeout, dictionary and expiries'''",
                    "        self._timeout = 6",
                    "",
                    "        self._data = dict(*args, **kwargs)",
                    "        self._expires = {k: time.time() + self._timeout for k in self._data}",
                    "",
                    "    def __getitem__(self, item):",
                    "        '''get with expire check'''",
                    "        self._expire_check()",
                    "        return self._data[item]",
                    "",
                    "    def __setitem__(self, item, value):",
                    "        '''set item and expiry'''",
                    "        self._expire_check()",
                    "        self._data[item] = value",
                    "        self._expires[item] = time.time() + self._timeout",
                    "",
                    "    def __delitem__(self, item):",
                    "        '''delete item, this also expires other keys if needed'''",
                    "        self._expire_check()",
                    "        del self._data[item]",
                    "        del self._expires[item]",
                    "",
                    "    def __len__(self):",
                    "        '''len and expire check'''",
                    "        self._expire_check()",
                    "        return len(self._data)",
                    "",
                    "    def __contains__(self, item):",
                    "        '''contain and expire check'''",
                    "        self._expire_check()",
                    "        return item in self._data",
                    "",
                    "    def __iter__(self):",
                    "        call_time = time.time()",
                    "        for key in list(self._data.keys()):",
                    "            if call_time < self._expires.get(key):",
                    "                yield key",
                    "            else:",
                    "                del self._data[key]",
                    "                del self._expires[key]",
                    "",
                    "    def keys(self):",
                    "        call_time = time.time()",
                    "        for key, exp_time in list(self._expires.items()):",
                    "            if call_time < exp_time:",
                    "                yield key",
                    "            else:",
                    "                del self._data[key]",
                    "                del self._expires[key]",
                    "",
                    "    def items(self):",
                    "        call_time = time.time()",
                    "        for key, data in list(self._data.items()):",
                    "            if call_time < self._expires[key]:",
                    "                yield key, data",
                    "            else:",
                    "                del self._data[key]",
                    "                del self._expires[key]",
                    "",
                    "    def values(self):",
                    "        call_time = time.time()",
                    "        for key, data in list(self._data.items()):",
                    "            if call_time < self._expires[key]:",
                    "                yield data",
                    "            else:",
                    "                del self._data[key]",
                    "                del self._expires[key]"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Python3",
                "shellId": "100DBAC47AC54EFD8498173DBB838EEB",
                "elapsedTime": 199
            },
            "evaluatorReader": true,
            "lineCount": 88,
            "isError": false
        },
        {
            "id": "codeHPbphm",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "import time",
                    "",
                    "d = TimeoutDict()",
                    "d[0] = 0",
                    "print (len(d))",
                    "time.sleep(1)",
                    "d[1] = 1",
                    "print (len(d))",
                    "print(d[1])",
                    "print(d[0])",
                    "time.sleep(5)",
                    "print(d[1])",
                    "print (len(d))",
                    "print(d[0])",
                    "print (len(d))"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "1\n"
                        },
                        {
                            "type": "out",
                            "value": "2\n1\n0\n"
                        },
                        {
                            "type": "out",
                            "value": "1\n1\n"
                        }
                    ],
                    "payload": {
                        "type": "BeakerDisplay",
                        "innertype": "Error",
                        "object": [
                            "0",
                            "0<br><span  class=\"ansired\">---------------------------------------------------------------------------</span><br><span  class=\"ansired\">KeyError</span>                                  Traceback (most recent call last)<br><span  class=\"ansigreen\">&lt;ipython-input-1-7938a100b55b&gt;</span> in <span  class=\"ansicyan\">&lt;module&gt;<span  class=\"ansiblue\">()</span>\n<span  class=\"ansigreen\">     12</span> print<span  class=\"ansiblue\">(</span>d<span  class=\"ansiblue\">[</span><span  class=\"ansicyan\">1</span><span  class=\"ansiblue\">]</span><span  class=\"ansiblue\">)</span><span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">     13</span> print <span  class=\"ansiblue\">(</span>len<span  class=\"ansiblue\">(</span>d<span  class=\"ansiblue\">)</span><span  class=\"ansiblue\">)</span><span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">---&gt; 14<span  class=\"ansired\"> </span>print<span  class=\"ansiblue\">(</span>d<span  class=\"ansiblue\">[</span><span  class=\"ansicyan\">0</span><span  class=\"ansiblue\">]</span><span  class=\"ansiblue\">)</span><span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">     15</span> print <span  class=\"ansiblue\">(</span>len<span  class=\"ansiblue\">(</span>d<span  class=\"ansiblue\">)</span><span  class=\"ansiblue\">)</span><span  class=\"ansiblue\"></span>\n<br><span  class=\"ansigreen\">&lt;ipython-input-1-92d41342e6c4&gt;</span> in <span  class=\"ansicyan\">__getitem__<span  class=\"ansiblue\">(self, item)</span>\n<span  class=\"ansigreen\">     24</span>     <span  class=\"ansigreen\">def</span> __getitem__<span  class=\"ansiblue\">(</span>self<span  class=\"ansiblue\">,</span> item<span  class=\"ansiblue\">)</span><span  class=\"ansiblue\">:</span><span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">     25</span>         self<span  class=\"ansiblue\">.</span>_expire_check<span  class=\"ansiblue\">(</span><span  class=\"ansiblue\">)</span><span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">---&gt; 26<span  class=\"ansired\">         <span  class=\"ansigreen\">return</span> self<span  class=\"ansiblue\">.</span>_data<span  class=\"ansiblue\">[</span>item<span  class=\"ansiblue\">]</span><span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">     27</span> <span  class=\"ansiblue\"></span>\n<span  class=\"ansigreen\">     28</span>     <span  class=\"ansigreen\">def</span> __setitem__<span  class=\"ansiblue\">(</span>self<span  class=\"ansiblue\">,</span> item<span  class=\"ansiblue\">,</span> value<span  class=\"ansiblue\">)</span><span  class=\"ansiblue\">:</span><span  class=\"ansiblue\"></span>\n<br><span  class=\"ansired\">KeyError</span>: 0"
                        ]
                    }
                },
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "100DBAC47AC54EFD8498173DBB838EEB",
                "elapsedTime": 8533,
                "height": 179
            },
            "evaluatorReader": true,
            "lineCount": 15,
            "isError": true
        },
        {
            "id": "code3psoWO",
            "type": "code",
            "evaluator": "Python3",
            "input": {
                "body": [
                    "import unittest",
                    "",
                    "class TestTimeoutDict(unittest.TestCase):",
                    "    def test_timeout(self):",
                    "        d = TimeoutDict()",
                    "        d[0] = 0 #assign d[0], set its time",
                    "        self.assertEqual(len(d), 1) #there is one item in dict",
                    "        time.sleep(1) #after 1 second",
                    "        d[1] = 1 #assign d[1], set its time",
                    "        self.assertEqual(d[1], 1) #d[0] is valid",
                    "        self.assertEqual(d[0], 0) #d[1] is valid",
                    "        self.assertEqual(len(d), 2) #there are two item in dict",
                    "        time.sleep(5) #after 5 additional seconds",
                    "        self.assertEqual(d[1], 1) #d[1] is still valid",
                    "        self.assertEqual(len(d), 1) #there is only one item in dict, even though we haven't asked for d[0] yet",
                    "        self.assertRaises(KeyError, d.__getitem__, 0) #d[0] has expired",
                    "        ",
                    "suite = unittest.TestLoader().loadTestsFromTestCase(TestTimeoutDict)",
                    "unittest.TextTestRunner(verbosity=2).run(suite)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "test_timeout (__main__.TestTimeoutDict) ... "
                        },
                        {
                            "type": "err",
                            "value": "ok\n\n----------------------------------------------------------------------\nRan 1 test in 6.008s\n\nOK\n"
                        }
                    ],
                    "payload": "<div class=\"output_subarea output_text\"><pre>&lt;unittest.runner.TextTestResult run=1 errors=0 failures=0&gt;</pre></div>"
                },
                "selectedType": "Results",
                "pluginName": "Python3",
                "shellId": "100DBAC47AC54EFD8498173DBB838EEB",
                "elapsedTime": 6387,
                "height": 167
            },
            "evaluatorReader": true,
            "lineCount": 19,
            "isError": false
        }
    ],
    "namespace": {}
}
